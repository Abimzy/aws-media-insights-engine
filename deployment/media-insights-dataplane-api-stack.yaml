{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Outputs": {
    "APIHandlerArn": {
      "Value": {
        "Fn::GetAtt": [
          "APIHandler",
          "Arn"
        ]
      }
    },
    "APIHandlerName": {
      "Value": {
        "Ref": "APIHandler"
      }
    },
    "EndpointURL": {
      "Value": {
        "Fn::Sub": "https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/api/"
      }
    },
    "RestAPIId": {
      "Value": {
        "Ref": "RestAPI"
      }
    }
  },
  "Parameters": {
    "ApiIpList": {
      "Description": "List of IP that can access MIE APIs",
      "Type": "String"
    },
    "DataplaneBucketName": {
      "Description": "Bucket used to store asset media",
      "Type": "String"
    },
    "DataplaneTableName": {
      "Description": "Table used for storing asset metadata",
      "Type": "String"
    }
  },
  "Resources": {
    "APIHandlerInvokePermission": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "APIHandler"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPIId}/*",
            {
              "RestAPIId": {
                "Ref": "RestAPI"
              }
            }
          ]
        }
      },
      "Type": "AWS::Lambda::Permission"
    },
    "ApiHandlerRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Sid": ""
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "s3:*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Action": "dynamodb:*",
                  "Effect": "Allow",
                  "Resource": "arn:aws:dynamodb:*:*:table/*"
                },
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                  "Sid": "Logging"
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "ApiHandlerRolePolicy"
          }
        ]
      },
      "Type": "AWS::IAM::Role",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W11",
              "reason": "TODO: IAM role should not allow * resource on its permissions policy"
            },
            {
              "id": "F3",
              "reason": "TODO: IAM role should not allow * resource on its permissions policy"
            }
          ]
        }
      }
    },
    "APIHandler": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "mie-custom-us-east-1",
          "S3Key": "media-insights-solution/1/code/2416eddfa0e043a7ab020ce378416c2d"
        },
        "Handler": "app.app",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "ApiHandlerRole",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "DATAPLANE_BUCKET": {
              "Ref": "DataplaneBucketName"
            },
            "DATAPLANE_TABLE_NAME": {
              "Ref": "DataplaneTableName"
            }
          }
        },
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          },
          {
            "Key": "aws-chalice",
            "Value": "version=1.12.0:stage=dev:app=dataplaneapi"
          }
        ]
      }
    },
    "RestAPI": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Body": {
          "definitions": {
            "Empty": {
              "title": "Empty Schema",
              "type": "object"
            }
          },
          "info": {
            "title": "dataplaneapi",
            "version": "1.0"
          },
          "paths": {
            "/": {
              "get": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              }
            },
            "/create": {
              "options": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      }
                    },
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "passthroughBehavior": "when_no_match",
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'",
                        "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "statusCode": "200"
                    }
                  },
                  "type": "mock"
                }
              },
              "post": {
                "consumes": [
                  "application/json"
                ],
                "description": "Body:\n\n.. code-block:: python\n\n    {\n        \"Input\": {\n            \"S3Bucket\": \"{somenbucket}\",\n            \"S3Key\": \"{somekey}\"\n        }\n    }\n\nReturns:\n    A dict containing the asset id and the location of the media object in the dataplane.\n     .. code-block:: python\n\n        {\n            \"AssetId\": asset_id,\n            \"S3Bucket\": dataplane_s3_bucket,\n            \"S3Key\": key\n        }\nRaises:\n    ChaliceViewError - 500",
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Create an asset in the dataplane from a json input composed of the input key and bucket of the object.",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              }
            },
            "/download": {
              "options": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      }
                    },
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "passthroughBehavior": "when_no_match",
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'",
                        "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "statusCode": "200"
                    }
                  },
                  "type": "mock"
                }
              },
              "post": {
                "consumes": [
                  "application/json"
                ],
                "description": "Returns:\n    Pre-signed S3 URL for downloading files from S3 to a web application.\nRaises:\n    ChaliceViewError - 500",
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Generate a pre-signed URL that can be used to download media files from S3.",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              }
            },
            "/mediapath/{asset_id}/{workflow_id}": {
              "get": {
                "consumes": [
                  "application/json"
                ],
                "description": "Returns:\n     Dictionary containing the S3 bucket and key for uploading a given asset media object to the dataplane.\nRaises:\n    ChaliceViewError - 500",
                "parameters": [
                  {
                    "in": "path",
                    "name": "asset_id",
                    "required": true,
                    "type": "string"
                  },
                  {
                    "in": "path",
                    "name": "workflow_id",
                    "required": true,
                    "type": "string"
                  }
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Generate a media storage path in the dataplane S3 bucket.",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              },
              "options": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      }
                    },
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "passthroughBehavior": "when_no_match",
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'",
                        "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "statusCode": "200"
                    }
                  },
                  "type": "mock"
                }
              }
            },
            "/metadata": {
              "get": {
                "consumes": [
                  "application/json"
                ],
                "description": "    Dict containing a list of all assets by their asset_id. The list returns empty if no assets have been created.\n\n    .. code-block:: python\n    {\n        \"assets\": [\"$asset_id_1\", \"$asset_id_2\"...]\n    }\nRaises:\n    ChaliceViewError - 500",
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Returns:",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              },
              "options": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      }
                    },
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "passthroughBehavior": "when_no_match",
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'",
                        "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "statusCode": "200"
                    }
                  },
                  "type": "mock"
                }
              }
            },
            "/metadata/{asset_id}": {
              "delete": {
                "consumes": [
                  "application/json"
                ],
                "description": "Returns:\n    Deletion status from dataplane.\nRaises:\n    ChaliceViewError - 500",
                "parameters": [
                  {
                    "in": "path",
                    "name": "asset_id",
                    "required": true,
                    "type": "string"
                  }
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Deletes an asset and all metadata from the dataplane.",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              },
              "get": {
                "consumes": [
                  "application/json"
                ],
                "description": "The first call to this method will return a dictionary containing the asset_id, a results key containing\nglobal asset information, and a cursor to iterate through each stored metadata type.\n\nTo receive the additional metadata, make additional calls to this endpoint and pass in the value of the cursor\nresponse key as the value for the cursor query parameter.\n\nOnce all results have been retrieved, no cursor key will be present in the response.\n\nReturns:\n    All asset metadata\n\n    .. code-block:: python\n\n    {\n        \"asset_id\": asset_id,\n        \"operator\": operator_name,\n        \"cursor\": encoded_cursor_value,\n        \"results\": global_asset_info (if first call) / operator metadata\n    }\n\nRaises:\n    ChaliceViewError - 500",
                "parameters": [
                  {
                    "in": "path",
                    "name": "asset_id",
                    "required": true,
                    "type": "string"
                  }
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Retrieves all of the metadata for a specified asset.",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              },
              "options": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      }
                    },
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "passthroughBehavior": "when_no_match",
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'",
                        "method.response.header.Access-Control-Allow-Methods": "'POST,GET,DELETE,OPTIONS'",
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "statusCode": "200"
                    }
                  },
                  "type": "mock"
                }
              },
              "post": {
                "consumes": [
                  "application/json"
                ],
                "description": "If the results are in a paginated format, such as from Rekognition, you must set the paginate query param to\n\"true\" for each page of metadata a put metadata call is made for. For the final page of results,\nthe \"end\" query param must be set to \"true\", which will tell the dataplane that the paginated session is\nover and update the pointer for that metadata type.\n\nQuery String Params:\n:param paginate: Boolean to tell dataplane that the results will come in as pages.\n:param end: Boolean to declare the last page in a set of paginated results.\n\nBody:\n\n.. code-block:: python\n\n    {\n        \"OperatorName\": \"{some_operator}\",\n        \"Results\": \"{json_formatted_results}\",\n        \"WorkflowId\": \"workflow-id\"\n    }\n\nReturns:\n\n    Dictionary containing the status of the PUT metadata operation. If a pointer is updated, the response will also\n    include the S3 Bucket and S3 Key that the data was written to.\n\n    .. code-block:: python\n\n    {\n        \"Status\": \"$status\", \"Bucket\": $bucket, \"Key\": $metadata_key\n    }\n\nRaises:\n    BadRequestError - 400\n    ChaliceViewError - 500",
                "parameters": [
                  {
                    "in": "path",
                    "name": "asset_id",
                    "required": true,
                    "type": "string"
                  }
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Adds operation metadata for an asset.",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              }
            },
            "/metadata/{asset_id}/{operator_name}": {
              "delete": {
                "consumes": [
                  "application/json"
                ],
                "description": "Returns:\n    Deletion status from dataplane.\nRaises:\n    NotFoundError - 404\n    ChaliceViewError - 500\n    ...",
                "parameters": [
                  {
                    "in": "path",
                    "name": "asset_id",
                    "required": true,
                    "type": "string"
                  },
                  {
                    "in": "path",
                    "name": "operator_name",
                    "required": true,
                    "type": "string"
                  }
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Deletes the specified operator metadata from an asset.",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              },
              "get": {
                "consumes": [
                  "application/json"
                ],
                "description": "If the results are paginated, the first call to this method will include a cursor in the response.\n\nTo receive the remaining paginated data, make additional calls to this endpoint and pass in the value of the cursor\nresponse key as the value for the cursor query parameter.\n\nOnce all results have been retrieved, no cursor key will be present in the response.\n\nReturns:\n\n    Metadata that a specific operator created\n\n    .. code-block:: python\n\n    {\n        \"asset_id\": asset_id,\n        \"operator\": operator_name,\n        \"cursor\": encoded_cursor_value,\n        \"results\": first_page_data\n    }\n\nRaises:\n    ChaliceViewError - 500",
                "parameters": [
                  {
                    "in": "path",
                    "name": "asset_id",
                    "required": true,
                    "type": "string"
                  },
                  {
                    "in": "path",
                    "name": "operator_name",
                    "required": true,
                    "type": "string"
                  }
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Retrieves specified operator metadata for a given asset.",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              },
              "options": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      }
                    },
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "passthroughBehavior": "when_no_match",
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'",
                        "method.response.header.Access-Control-Allow-Methods": "'GET,DELETE,OPTIONS'",
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "statusCode": "200"
                    }
                  },
                  "type": "mock"
                }
              }
            },
            "/upload": {
              "options": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      }
                    },
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "passthroughBehavior": "when_no_match",
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'",
                        "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "statusCode": "200"
                    }
                  },
                  "type": "mock"
                }
              },
              "post": {
                "consumes": [
                  "application/json"
                ],
                "description": "Returns:\n    Pre-signed S3 URL for uploading files to S3 from a web application\nRaises:\n    ChaliceViewError - 500",
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Generate a pre-signed URL that can be used to upload media files to S3 from a web application",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              }
            }
          },
          "schemes": [
            "https"
          ],
          "swagger": "2.0",
          "x-amazon-apigateway-binary-media-types": [
            "application/octet-stream",
            "application/x-tar",
            "application/zip",
            "audio/basic",
            "audio/ogg",
            "audio/mp4",
            "audio/mpeg",
            "audio/wav",
            "audio/webm",
            "image/png",
            "image/jpg",
            "image/jpeg",
            "image/gif",
            "video/ogg",
            "video/mpeg",
            "video/webm"
          ],
          "x-amazon-apigateway-policy": {
            "Statement": [
              {
                "Action": "execute-api:Invoke",
                "Effect": "Allow",
                "Principal": "*",
                "Resource": [
                  {
                    "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*/*"
                  }
                ]
              },
              {
                "Action": "execute-api:Invoke",
                "Condition": {
                  "NotIpAddress": {
                    "aws:SourceIp": [
                      {
                        "Fn::Sub": "${ApiIpList}"
                      }
                    ]
                  }
                },
                "Effect": "Deny",
                "Principal": "*",
                "Resource": [
                  {
                    "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*/*"
                  }
                ]
              }
            ],
            "Version": "2012-10-17"
          }
        },
        "Parameters": {
          "endpointConfigurationTypes": "EDGE"
        },
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        }
      }
    },
    "RestAPIDeploymente3a7752812": {
      "Type": "AWS::ApiGateway::Deployment",
      "Metadata": {
          "cfn_nag": {
              "rules_to_suppress": [
                  {
                      "id": "W45",
                      "reason": "TODO: ApiGateway should have access logging configured"
                  }
              ]
          }
      },
      "Properties": {
        "Description": "RestApi deployment id: e3a7752812c409c7e920bd01e397c4d634ce1f29",
        "RestApiId": {
          "Ref": "RestAPI"
        },
        "StageName": "Stage"
      }
    },
    "RestAPIapiStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {
          "Ref": "RestAPIDeploymente3a7752812"
        },
        "RestApiId": {
          "Ref": "RestAPI"
        },
        "StageName": "api"
      }
    }
  }
}