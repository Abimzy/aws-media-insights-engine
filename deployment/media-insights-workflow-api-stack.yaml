{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Outputs": {
    "APIHandlerArn": {
      "Value": {
        "Fn::GetAtt": [
          "APIHandler",
          "Arn"
        ]
      }
    },
    "APIHandlerName": {
      "Value": {
        "Ref": "APIHandler"
      }
    },
    "EndpointURL": {
      "Value": {
        "Fn::Sub": "https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/api/"
      }
    },
    "RestAPIId": {
      "Value": {
        "Ref": "RestAPI"
      }
    },
    "WorkflowCustomResourceArn": {
      "Value": {
        "Fn::GetAtt": [
          "WorkflowCustomResource",
          "Arn"
        ]
      }
    }
  },
  "Parameters": {
    "ApiIpList": {
      "Description": "List of IP that can access MIE APIs",
      "Type": "String"
    },
    "CompleteStageLambdaArn": {
      "Description": "Lambda that completes execution of a stage",
      "Type": "String"
    },
    "DataPlaneBucket": {
      "Description": "S3 bucket of the dataplane",
      "Type": "String"
    },
    "DataplaneEndpoint": {
      "Description": "Rest endpoint for the dataplane",
      "Type": "String"
    },
    "FilterOperationLambdaArn": {
      "Description": "Lambda that checks if an operation should execute",
      "Type": "String"
    },
    "HistoryTableName": {
      "Description": "Table used to store workflow resource history",
      "Type": "String"
    },
    "OperationTableName": {
      "Description": "Table used to store operations",
      "Type": "String"
    },
    "OperatorFailedHandlerLambdaArn": {
      "Description": "Lambda that handles failed operator states",
      "Type": "String"
    },
    "StageExecutionQueueUrl": {
      "Description": "Queue used to post stage executions for processing",
      "Type": "String"
    },
    "StageExecutionRole": {
      "Description": "ARN of the role used to execute a stage state machine",
      "Type": "String"
    },
    "StageTableName": {
      "Description": "Table used to store stage definitions",
      "Type": "String"
    },
    "SystemTableName": {
      "Description": "Table used to store system configuration",
      "Type": "String"
    },
    "WorkflowExecutionTableName": {
      "Description": "Table used to monitor Workflow executions",
      "Type": "String"
    },
    "WorkflowSchedulerLambdaArn": {
      "Description": "Lambda that schedules workflows from the work queue",
      "Type": "String"
    },
    "WorkflowTableName": {
      "Description": "Table used to store workflow defintitions",
      "Type": "String"
    }
  },
  "Resources": {
    "APIHandlerInvokePermission": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "APIHandler"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPIId}/*",
            {
              "RestAPIId": {
                "Ref": "RestAPI"
              }
            }
          ]
        }
      },
      "Type": "AWS::Lambda::Permission"
    },
    "ApiHandlerRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Sid": ""
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                  "Sid": "Logging"
                },
                {
                  "Action": [
                    "dynamodb:*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ],
                  "Sid": "DynamoTables"
                },
                {
                  "Action": "states:*",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": "lambda:InvokeFunction",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": [
                    "sqs:*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ],
                  "Sid": "SQS"
                },
                {
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "ApiHandlerRolePolicy"
          }
        ]
      },
      "Type": "AWS::IAM::Role",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F3",
              "reason": "TODO: IAM role should not allow * action on its permissions policy"
            },
            {
              "id": "W11",
              "reason": "TODO: IAM role should not allow * resource on its permissions policy"
            }
          ]
        }
      }
    },
    "WorkflowCustomResourceRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Sid": ""
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                  "Sid": "Logging"
                },
                {
                  "Action": [
                    "dynamodb:*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ],
                  "Sid": "DynamoTables"
                },
                {
                  "Action": "states:*",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": "lambda:InvokeFunction",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": [
                    "sqs:*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ],
                  "Sid": "SQS"
                },
                {
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "WorkflowCustomResourceRolePolicy"
          }
        ]
      },
      "Type": "AWS::IAM::Role",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F38",
              "reason": "TODO: IAM role should not allow * resource with PassRole action on its permissions policy"
            },
            {
              "id": "F3",
              "reason": "TODO: IAM role should not allow * action on its permissions policy"
            },
            {
              "id": "W11",
              "reason": "TODO: IAM role should not allow * resource on its permissions policy"
            }
          ]
        }
      }
    },
    "APIHandler": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "mie-custom-us-east-1",
          "S3Key": "media-insights-solution/1/code/d093ab4f5da73a4e25b3531b115642d6"
        },
        "Handler": "app.app",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "ApiHandlerRole",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "COMPLETE_STAGE_LAMBDA_ARN": {
              "Ref": "CompleteStageLambdaArn"
            },
            "DATAPLANE_BUCKET": {
              "Ref": "DataPlaneBucket"
            },
            "DataplaneEndpoint": {
              "Ref": "DataplaneEndpoint"
            },
            "FILTER_OPERATION_LAMBDA_ARN": {
              "Ref": "FilterOperationLambdaArn"
            },
            "HISTORY_TABLE_NAME": {
              "Ref": "HistoryTableName"
            },
            "OPERATION_TABLE_NAME": {
              "Ref": "OperationTableName"
            },
            "OPERATOR_FAILED_LAMBDA_ARN": {
              "Ref": "OperatorFailedHandlerLambdaArn"
            },
            "STAGE_EXECUTION_QUEUE_URL": {
              "Ref": "StageExecutionQueueUrl"
            },
            "STAGE_EXECUTION_ROLE": {
              "Ref": "StageExecutionRole"
            },
            "STAGE_TABLE_NAME": {
              "Ref": "StageTableName"
            },
            "SYSTEM_TABLE_NAME": {
              "Ref": "SystemTableName"
            },
            "WORKFLOW_EXECUTION_TABLE_NAME": {
              "Ref": "WorkflowExecutionTableName"
            },
            "WORKFLOW_SCHEDULER_LAMBDA_ARN": {
              "Ref": "WorkflowSchedulerLambdaArn"
            },
            "WORKFLOW_TABLE_NAME": {
              "Ref": "WorkflowTableName"
            }
          }
        },
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          },
          {
            "Key": "aws-chalice",
            "Value": "version=1.12.0:stage=dev:app=workflowapi"
          }
        ]
      }
    },
    "WorkflowCustomResource": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "mie-custom-us-east-1",
          "S3Key": "media-insights-solution/1/code/d093ab4f5da73a4e25b3531b115642d6"
        },
        "Handler": "app.workflow_custom_resource",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "WorkflowCustomResourceRole",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "COMPLETE_STAGE_LAMBDA_ARN": {
              "Ref": "CompleteStageLambdaArn"
            },
            "DATAPLANE_BUCKET": {
              "Ref": "DataPlaneBucket"
            },
            "DataplaneEndpoint": {
              "Ref": "DataplaneEndpoint"
            },
            "FILTER_OPERATION_LAMBDA_ARN": {
              "Ref": "FilterOperationLambdaArn"
            },
            "HISTORY_TABLE_NAME": {
              "Ref": "HistoryTableName"
            },
            "OPERATION_TABLE_NAME": {
              "Ref": "OperationTableName"
            },
            "OPERATOR_FAILED_LAMBDA_ARN": {
              "Ref": "OperatorFailedHandlerLambdaArn"
            },
            "STAGE_EXECUTION_QUEUE_URL": {
              "Ref": "StageExecutionQueueUrl"
            },
            "STAGE_EXECUTION_ROLE": {
              "Ref": "StageExecutionRole"
            },
            "STAGE_TABLE_NAME": {
              "Ref": "StageTableName"
            },
            "SYSTEM_TABLE_NAME": {
              "Ref": "SystemTableName"
            },
            "WORKFLOW_EXECUTION_TABLE_NAME": {
              "Ref": "WorkflowExecutionTableName"
            },
            "WORKFLOW_SCHEDULER_LAMBDA_ARN": {
              "Ref": "WorkflowSchedulerLambdaArn"
            },
            "WORKFLOW_TABLE_NAME": {
              "Ref": "WorkflowTableName"
            }
          }
        },
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          },
          {
            "Key": "aws-chalice",
            "Value": "version=1.12.0:stage=dev:app=workflowapi"
          }
        ]
      }
    },
    "RestAPI": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Body": {
          "definitions": {
            "Empty": {
              "title": "Empty Schema",
              "type": "object"
            }
          },
          "info": {
            "title": "workflowapi",
            "version": "1.0"
          },
          "paths": {
            "/": {
              "get": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              }
            },
            "/system/configuration": {
              "get": {
                "consumes": [
                  "application/json"
                ],
                "description": "- Gets the current MIE system configuration parameter settings\n\nReturns:\n    A list of dict containing the current MIE system configuration key-value pairs. \n\n    .. code-block:: python\n\n        [\n            {\n            \"Name\": \"Value\"\n            },\n        ...]\n\nRaises:\n    200: The system configuration was returned successfully.\n    500: Internal server error ",
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Get the current MIE system configuration",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              },
              "options": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      }
                    },
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "passthroughBehavior": "when_no_match",
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'",
                        "method.response.header.Access-Control-Allow-Methods": "'POST,GET,OPTIONS'",
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "statusCode": "200"
                    }
                  },
                  "type": "mock"
                }
              },
              "post": {
                "consumes": [
                  "application/json"
                ],
                "description": "- Updates the MIE system configuration with a new parameter or changes the value of\n  existing parameters \n\nBody:\n\n.. code-block:: python\n\n    {\n        \"Name\": \"ParameterName\",\n        \"Value\": \"ParameterValue\" \n    }\n\nSupported parameters:\n\n    MaxConcurrentWorkflows\n        \n        Sets the maximum number of workflows that are allowed to run concurrently.\n        Any new workflows that are added after MaxConcurrentWorkflows is reached are\n        placed on a queue until capacity is freed by completing workflows.  Use this\n        to help avoid throttling in service API calls from workflow operators.\n\n        This setting is checked each time the WorkflowSchedulerLambda is run and may\n        take up to 60 seconds to take effect.\n\nReturns:\n    None\n\nRaises:\n    200: The system configuration was set successfully successfully.\n    400: Bad Request \n         - an input value is invalid\n    500: Internal server error ",
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Add a new system configuration parameter",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              }
            },
            "/workflow": {
              "get": {
                "consumes": [
                  "application/json"
                ],
                "description": "Returns:\n    A list of workflow definitions.\n\nRaises:\n    200: All workflows returned sucessfully.\n    500: Internal server error ",
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "List all workflow defintions",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              },
              "options": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      }
                    },
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "passthroughBehavior": "when_no_match",
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'",
                        "method.response.header.Access-Control-Allow-Methods": "'POST,PUT,GET,OPTIONS'",
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "statusCode": "200"
                    }
                  },
                  "type": "mock"
                }
              },
              "post": {
                "consumes": [
                  "application/json"
                ],
                "description": "A workflow is a pipeline of stages that are executed sequentially to transform and \nextract metadata for a set of MediaType objects.  Each stage must contain either a \n\"Next\" key indicating the next stage to execute or and \"End\" key indicating it\nis the last stage.\n\nBody:\n\n.. code-block:: python\n\n    {\n        \"Name\": string,\n        \"StartAt\": string - name of starting stage,\n        \"Stages\": {\n            \"stage-name\": {\n                \"Next\": \"string - name of next stage\"\n            },\n            ...,\n            \"stage-name\": {\n                \"End\": true\n            }\n        }\n    }\n\n\nReturns:\n    A dict mapping keys to the corresponding workflow created including the \n    AWS resources used to execute each stage.        \n\n    .. code-block:: python\n\n        {\n            \"Name\": string,\n            \"StartAt\": string - name of starting stage,\n            \"Stages\": {\n                \"stage-name\": {\n                    \"Resource\": queueARN,\n                    \"StateMachine\": stateMachineARN,\n                    \"Configuration\": stageConfigurationObject,\n                    \"Next\": \"string - name of next stage\"\n                },\n                ...,\n                \"stage-name\": {\n                    \"Resource\": queueARN,\n                    \"StateMachine\": stateMachineARN,\n                    \"Configuration\": stageConfigurationObject,\n                    \"End\": true\n                }\n            }\n        }\n    \n\nRaises:\n    200: The workflow was created successfully.\n    400: Bad Request - one of the input stages was not found or was invalid\n    500: Internal server error ",
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Create a workflow from a list of existing stages.  ",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              },
              "put": {
                "consumes": [
                  "application/json"
                ],
                "description": "Update the definition of an existing workflow.\n\n\nBody:\n\n.. code-block:: python\n\n    {\n        \"Name\": string - name of the workflow to modify,\n        \"StartAt\": string - name of starting stage,\n        \"Stages\": {\n            \"stage-name\": {\n                \"Next\": \"string - name of next stage\"\n            },\n            ...,\n            \"stage-name\": {\n                \"End\": true\n            }\n        }\n    }\n\n\nReturns:\n    A dict mapping keys to the corresponding workflow updated including the \n    AWS resources used to execute each stage.        \n\n    .. code-block:: python\n\n        {\n            \"Name\": string - name of the workflow to modify,\n            \"Configuration\": Configuration object.  Contains the default configuration for the workflow.  Use the\n                GET /workflow/donfiguration/{WorkflowName} API to get the current setting for this object.\n            \"StartAt\": string - name of starting stage,\n            \"Stages\": {\n                \"stage-name\": {\n                    \"Resource\": queueARN,\n                    \"StateMachine\": stateMachineARN,\n                    \"Configuration\": stageConfigurationObject,\n                    \"Next\": \"string - name of next stage\"\n                },\n                ...,\n                \"stage-name\": {\n                    \"Resource\": queueARN,\n                    \"StateMachine\": stateMachineARN,\n                    \"Configuration\": stageConfigurationObject,\n                    \"End\": true\n                }\n            }\n        }\n    \n\nRaises:\n    200: The workflow was updated successfully.\n    400: Bad Request - one of the input stages was not found or was invalid\n    500: Internal server error ",
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Update a workflow from a list of existing stages.  ",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              }
            },
            "/workflow/configuration/{Name}": {
              "get": {
                "consumes": [
                  "application/json"
                ],
                "description": "Returns:\n    A dictionary contianing the workflow configuration.\n\nRaises:\n    200: All workflows returned sucessfully.\n    404: Not found\n    500: Internal server error ",
                "parameters": [
                  {
                    "in": "path",
                    "name": "Name",
                    "required": true,
                    "type": "string"
                  }
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Get a workflow configruation object by name",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              },
              "options": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      }
                    },
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "passthroughBehavior": "when_no_match",
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'",
                        "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "statusCode": "200"
                    }
                  },
                  "type": "mock"
                }
              }
            },
            "/workflow/execution": {
              "get": {
                "consumes": [
                  "application/json"
                ],
                "description": "Returns:\n    A list of workflow executions.\n\nRaises:\n    200: All workflow executions returned sucessfully.\n    500: Internal server error ",
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "List all workflow executions",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              },
              "options": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      }
                    },
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "passthroughBehavior": "when_no_match",
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'",
                        "method.response.header.Access-Control-Allow-Methods": "'POST,PUT,GET,OPTIONS'",
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "statusCode": "200"
                    }
                  },
                  "type": "mock"
                }
              },
              "post": {
                "consumes": [
                  "application/json"
                ],
                "description": "The Body contains the name of the workflow to execute, at least one input \nmedia type within the media object.  A dictionary of stage configuration \nobjects can be passed in to override the default configuration of the operations\nwithin the stages.\n\nBody:\n\n.. code-block:: python\n\n    {\n    \"Name\":\"Default\",\n    \"Input\": media-object\n    \"Configuration\": {\n        {\n        \"stage-name\": {\n            \"Operations\": {\n                \"SplitAudio\": {\n                   \"Enabled\": True,\n                   \"MediaTypes\": {\n                       \"Video\": True/False,\n                       \"Audio\": True/False,\n                       \"Frame\": True/False\n                   }\n               },\n           },\n       }\n       ...\n       }\n    }\n\n\nReturns:\n    A dict mapping keys to the corresponding workflow execution created including \n    the WorkflowExecutionId, the AWS queue and state machine resources assiciated with\n    the workflow execution and the current execution status of the workflow. \n\n    .. code-block:: python\n\n        {\n            \"Name\": string,\n            \"StartAt\": \"Preprocess\",\n            \"Stages\": {\n                \"stage-name\": {\n                    \"Type\": \"NestedQueue\",\n                    \"Resource\": queueARN,\n                    \"StateMachine\": stateMachineARN,\n                    \"Next\": \"Analysis\"\n                },\n                ...,\n                \"stage-name: {\n                    \"Type\": \"NestedQueue\",\n                    \"Resource\": queueARN,\n                    \"StateMachine\": stateMachineARN,\n                    \"End\": true\n                }\n            }\n        }\n\nRaises:\n    200: The workflow execution was created successfully.\n    400: Bad Request - the input workflow was not found or was invalid\n    500: Internal server error  ",
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Execute a workflow.  ",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              },
              "put": {
                "consumes": [
                  "application/json"
                ],
                "description": "XXX",
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Update a workflow execution NOT IMPLEMENTED ",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              }
            },
            "/workflow/execution/asset/{AssetId}": {
              "get": {
                "consumes": [
                  "application/json"
                ],
                "description": "Returns:\n    A list of dictionaries containing the workflow executions matching the AssetId.\n\nRaises:\n    200: Workflow executions returned sucessfully.\n    404: Not found\n    500: Internal server error ",
                "parameters": [
                  {
                    "in": "path",
                    "name": "AssetId",
                    "required": true,
                    "type": "string"
                  }
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Get workflow executions by AssetId",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              },
              "options": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      }
                    },
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "passthroughBehavior": "when_no_match",
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'",
                        "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "statusCode": "200"
                    }
                  },
                  "type": "mock"
                }
              }
            },
            "/workflow/execution/status/{Status}": {
              "get": {
                "consumes": [
                  "application/json"
                ],
                "description": "Returns:\n    A list of dictionaries containing the workflow executions with the requested status\n\nRaises:\n    200: All workflows returned sucessfully.\n    404: Not found\n    500: Internal server error ",
                "parameters": [
                  {
                    "in": "path",
                    "name": "Status",
                    "required": true,
                    "type": "string"
                  }
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Get all workflow executions with the specified status",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              },
              "options": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      }
                    },
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "passthroughBehavior": "when_no_match",
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'",
                        "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "statusCode": "200"
                    }
                  },
                  "type": "mock"
                }
              }
            },
            "/workflow/execution/{Id}": {
              "delete": {
                "consumes": [
                  "application/json"
                ],
                "description": "Returns:  \n\nRaises:\n    200: Workflow execution deleted sucessfully.\n    404: Not found\n    500: Internal server error ",
                "parameters": [
                  {
                    "in": "path",
                    "name": "Id",
                    "required": true,
                    "type": "string"
                  }
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Delete a workflow executions",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              },
              "get": {
                "consumes": [
                  "application/json"
                ],
                "description": "Returns:\n    A dictionary containing the workflow execution.\n\nRaises:\n    200: Workflow executions returned sucessfully.\n    404: Not found\n    500: Internal server error ",
                "parameters": [
                  {
                    "in": "path",
                    "name": "Id",
                    "required": true,
                    "type": "string"
                  }
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Get a workflow execution by id",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              },
              "options": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      }
                    },
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "passthroughBehavior": "when_no_match",
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'",
                        "method.response.header.Access-Control-Allow-Methods": "'GET,DELETE,OPTIONS'",
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "statusCode": "200"
                    }
                  },
                  "type": "mock"
                }
              }
            },
            "/workflow/list/operation/{OperatorName}": {
              "get": {
                "consumes": [
                  "application/json"
                ],
                "description": "Returns:\n    A list of workflow definitions.\n\nRaises:\n    200: All workflows returned sucessfully.\n    500: Internal server error ",
                "parameters": [
                  {
                    "in": "path",
                    "name": "OperatorName",
                    "required": true,
                    "type": "string"
                  }
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "List all workflow defintions that contain an operator",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              },
              "options": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      }
                    },
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "passthroughBehavior": "when_no_match",
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'",
                        "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "statusCode": "200"
                    }
                  },
                  "type": "mock"
                }
              }
            },
            "/workflow/list/stage/{StageName}": {
              "get": {
                "consumes": [
                  "application/json"
                ],
                "description": "Returns:\n    A list of workflow definitions.\n\nRaises:\n    200: All workflows returned sucessfully.\n    500: Internal server error ",
                "parameters": [
                  {
                    "in": "path",
                    "name": "StageName",
                    "required": true,
                    "type": "string"
                  }
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "List all workflow defintions that contain a stage",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              },
              "options": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      }
                    },
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "passthroughBehavior": "when_no_match",
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'",
                        "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "statusCode": "200"
                    }
                  },
                  "type": "mock"
                }
              }
            },
            "/workflow/operation": {
              "get": {
                "consumes": [
                  "application/json"
                ],
                "description": "Returns:\n    A list of operation definitions.\n\nRaises:\n    200: All operations returned sucessfully.\n    500: Internal server error ",
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "List all defined operators",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              },
              "options": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      }
                    },
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "passthroughBehavior": "when_no_match",
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'",
                        "method.response.header.Access-Control-Allow-Methods": "'POST,PUT,GET,OPTIONS'",
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "statusCode": "200"
                    }
                  },
                  "type": "mock"
                }
              },
              "post": {
                "consumes": [
                  "application/json"
                ],
                "description": "- Generates an operation state machine using the operation lambda(s) provided \n- Creates a singleton operator stage that can be used to run the operator as a single-operator \n  stage in a workflow.\n\nOperators can be synchronous (Sync) or asynchronous (Async). Synchronous operators complete \nbefore returning control to the invoker, while asynchronous operators return control to the invoker \nwhen the operation is successfully initiated, but not complete. Asynchronous operators require \nan additional monitoring task to check the status of the operation.\n\nFor more information on how to implemenent lambdas to be used in MIE operators, please\nrefer to the MIE Developer Quick Start.\n  \n   \n\nBody:\n\n.. code-block:: python\n\n    {\n        \"Name\":\"operation-name\",\n        \"Type\": [\"Async\"|\"Sync\"],\n        \"Configuration\" : {\n                \"MediaType\": \"Video\",\n                \"Enabled:\": True,\n                \"configuration1\": \"value1\",\n                \"configuration2\": \"value2\",\n                ...\n            }\n        \"StartLambdaArn\":arn,\n        \"MonitorLambdaArn\":arn,\n        \"SfnExecutionRole\": arn\n        }\n\nReturns:\n    A dict mapping keys to the corresponding operation. \n\n    .. code-block:: python\n\n        {\n            \"Name\": string,\n            \"Type\": [\"Async\"|\"Sync\"],\n            \"Configuration\" : {\n                \"MediaType\": \"Video|Frame|Audio|Text|...\",\n                \"Enabled:\": boolean,\n                \"configuration1\": \"value1\",\n                \"configuration2\": \"value2\",\n                ...\n            }\n            \"StartLambdaArn\":arn,\n            \"MonitorLambdaArn\":arn,\n            \"StateMachineExecutionRoleArn\": arn,\n            \"StateMachineAsl\": ASL-string\n            \"StageName\": string\n        }\n\nRaises:\n    200: The operation and stage was created successfully.\n    400: Bad Request \n         - one of the input lambdas was not found\n         - one or more of the required input keys is missing\n         - an input value is invalid\n    409: Conflict\n    500: Internal server error ",
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Create a new operation",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              },
              "put": {
                "consumes": [
                  "application/json"
                ],
                "description": "    ",
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Update operation NOT IMPLEMENTED ",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              }
            },
            "/workflow/operation/{Name}": {
              "delete": {
                "consumes": [
                  "application/json"
                ],
                "description": "Returns:  \n\nRaises:\n    200: Operation deleted sucessfully.\n    400: Bad Request - there are dependent workflows and query parameter force=false\n    500: Internal server error ",
                "parameters": [
                  {
                    "in": "path",
                    "name": "Name",
                    "required": true,
                    "type": "string"
                  }
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Delete a an operation",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              },
              "get": {
                "consumes": [
                  "application/json"
                ],
                "description": "Returns:\n    A dictionary containing the operation definition.\n\nRaises:\n    200: All operations returned sucessfully.\n    404: Not found\n    500: Internal server error ",
                "parameters": [
                  {
                    "in": "path",
                    "name": "Name",
                    "required": true,
                    "type": "string"
                  }
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Get an operation definition by name",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              },
              "options": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      }
                    },
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "passthroughBehavior": "when_no_match",
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'",
                        "method.response.header.Access-Control-Allow-Methods": "'GET,DELETE,OPTIONS'",
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "statusCode": "200"
                    }
                  },
                  "type": "mock"
                }
              }
            },
            "/workflow/stage": {
              "get": {
                "consumes": [
                  "application/json"
                ],
                "description": "Returns:\n    A list of operation definitions.\n\nRaises:\n    200: All operations returned sucessfully.\n    500: Internal server error ",
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "List all stage defintions",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              },
              "options": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      }
                    },
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "passthroughBehavior": "when_no_match",
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'",
                        "method.response.header.Access-Control-Allow-Methods": "'POST,PUT,GET,OPTIONS'",
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "statusCode": "200"
                    }
                  },
                  "type": "mock"
                }
              },
              "post": {
                "consumes": [
                  "application/json"
                ],
                "description": "A stage is a set of operations that are grouped so they can be executed in parallel.\nWhen the stage is executed as part of a workflow, operations within a stage are executed as\nbranches in a parallel Step Functions state.  The generated state machines status is tracked by the \nworkflow engine control plane during execution.\n\nAn optional Configuration for each operator in the stage can be input to override the\ndefault configuration for the stage.\n\nBody:\n\n.. code-block:: python\n\n        {\n        \"Name\":\"stage-name\",\n        \"Operations\": [\"operation-name1\", \"operation-name2\", ...]\n        }\n\nReturns:\n    A dict mapping keys to the corresponding stage created including \n    the ARN of the state machine created. \n\n    {\n        \"Name\": string,\n        \"Operations\": [\n            \"operation-name1\",\n            \"operation-name2\", \n            ...\n        ],\n        \"Configuration\": {\n            \"operation-name1\": operation-configuration-object1,\n            \"operation-name2\": operation-configuration-object1,\n            ...\n        }\n        \"StateMachineArn\": ARN-string\n    }\n    {\n        \"Name\": \"TestStage\",\n        \"Operations\": [\n            \"TestOperator\"\n        ],\n        \"Configuration\": {\n            \"TestOperator\": {\n                \"MediaType\": \"Video\",\n                \"Enabled\": true\n            }\n        },\n        \"StateMachineArn\": \"arn:aws:states:us-west-2:123456789123:stateMachine:TestStage\"\n    }\n\nRaises:\n    200: The stage was created successfully.\n    400: Bad Request - one of the input state machines was not found or was invalid\n    409: Conflict\n    500: Internal server error ",
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Create a stage state machine from a list of existing operations.  ",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              },
              "put": {
                "consumes": [
                  "application/json"
                ],
                "description": "XXX",
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Update a stage NOT IMPLEMENTED ",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              }
            },
            "/workflow/stage/{Name}": {
              "delete": {
                "consumes": [
                  "application/json"
                ],
                "description": "Returns:  \n\nRaises:\n    200: Stage deleted sucessfully.\n    400: Bad Request - there are dependent workflows and query parameter force=False\n    404: Not found\n    500: Internal server error ",
                "parameters": [
                  {
                    "in": "path",
                    "name": "Name",
                    "required": true,
                    "type": "string"
                  }
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Delete a stage",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              },
              "get": {
                "consumes": [
                  "application/json"
                ],
                "description": "Returns:\n    A dictionary contianing the stage definition.\n\nRaises:\n    200: All stages returned sucessfully.\n    404: Not found\n    500: Internal server error ",
                "parameters": [
                  {
                    "in": "path",
                    "name": "Name",
                    "required": true,
                    "type": "string"
                  }
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Get a stage definition by name",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              },
              "options": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      }
                    },
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "passthroughBehavior": "when_no_match",
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'",
                        "method.response.header.Access-Control-Allow-Methods": "'GET,DELETE,OPTIONS'",
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "statusCode": "200"
                    }
                  },
                  "type": "mock"
                }
              }
            },
            "/workflow/{Name}": {
              "delete": {
                "consumes": [
                  "application/json"
                ],
                "description": "Returns:  \n\nRaises:\n    200: Workflow deleted sucessfully.\n    404: Not found\n    500: Internal server error ",
                "parameters": [
                  {
                    "in": "path",
                    "name": "Name",
                    "required": true,
                    "type": "string"
                  }
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Delete a workflow",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              },
              "get": {
                "consumes": [
                  "application/json"
                ],
                "description": "Returns:\n    A dictionary contianing the workflow definition.\n\nRaises:\n    200: All workflows returned sucessfully.\n    404: Not found\n    500: Internal server error ",
                "parameters": [
                  {
                    "in": "path",
                    "name": "Name",
                    "required": true,
                    "type": "string"
                  }
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "summary": "Get a workflow definition by name",
                "x-amazon-apigateway-integration": {
                  "contentHandling": "CONVERT_TO_TEXT",
                  "httpMethod": "POST",
                  "passthroughBehavior": "when_no_match",
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                  }
                }
              },
              "options": {
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      }
                    },
                    "schema": {
                      "$ref": "#/definitions/Empty"
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "passthroughBehavior": "when_no_match",
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "responses": {
                    "default": {
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'",
                        "method.response.header.Access-Control-Allow-Methods": "'GET,DELETE,OPTIONS'",
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      },
                      "statusCode": "200"
                    }
                  },
                  "type": "mock"
                }
              }
            }
          },
          "schemes": [
            "https"
          ],
          "swagger": "2.0",
          "x-amazon-apigateway-binary-media-types": [
            "application/octet-stream",
            "application/x-tar",
            "application/zip",
            "audio/basic",
            "audio/ogg",
            "audio/mp4",
            "audio/mpeg",
            "audio/wav",
            "audio/webm",
            "image/png",
            "image/jpg",
            "image/jpeg",
            "image/gif",
            "video/ogg",
            "video/mpeg",
            "video/webm"
          ],
          "x-amazon-apigateway-policy": {
            "Statement": [
              {
                "Action": "execute-api:Invoke",
                "Effect": "Allow",
                "Principal": "*",
                "Resource": [
                  {
                    "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*/*"
                  }
                ]
              },
              {
                "Action": "execute-api:Invoke",
                "Condition": {
                  "NotIpAddress": {
                    "aws:SourceIp": [
                      {
                        "Fn::Sub": "${ApiIpList}"
                      }
                    ]
                  }
                },
                "Effect": "Deny",
                "Principal": "*",
                "Resource": [
                  {
                    "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*/*"
                  }
                ]
              }
            ],
            "Version": "2012-10-17"
          }
        },
        "Parameters": {
          "endpointConfigurationTypes": "EDGE"
        },
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        }
      }
    },
    "RestAPIDeploymentd1ff065705": {
      "Type": "AWS::ApiGateway::Deployment",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W45",
              "reason": "TODO: ApiGateway should have access logging configured."
            }
          ]
        }
      },
      "Properties": {
        "Description": "RestApi deployment id: d1ff0657052308e50da73c37538264f3e9f6a205",
        "RestApiId": {
          "Ref": "RestAPI"
        },
        "StageName": "Stage"
      }
    },
    "RestAPIapiStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {
          "Ref": "RestAPIDeploymentd1ff065705"
        },
        "RestApiId": {
          "Ref": "RestAPI"
        },
        "StageName": "api"
      }
    }
  }
}